
# This file was *autogenerated* from the file contained.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8); _sage_const_17 = Integer(17)#contained returns true if the each triangle in G is contained in at least one subgraph of the form SubGraph and
#false otherwise
def contained(G, Triangle, SubGraph):
    j = _sage_const_1 
    #calculates the total number of triangles in G
    for triangle in G.subgraph_search_iterator(Triangle,induced = true):
        if j == _sage_const_0 :
            # if j = 0, we did not find the triangle in any subgraph
            return false
        j = _sage_const_0 
        for subgraph in G.subgraph_search_iterator(SubGraph,induced = true):
            # we want to break if the triangle is contained in the current subgraph and start checking the next triangle
            if set(triangle).issubset(set(subgraph)):
                j = _sage_const_1 
                break
    return true

g=graphs.CirculantGraph(_sage_const_17 ,[_sage_const_1 , _sage_const_2 , _sage_const_4 , _sage_const_8 ])
T = graphs.CompleteGraph(_sage_const_3 )
H = Graph("F@LSW")

g.show()
T.show()
H.show()
print contained(g,T,H)

